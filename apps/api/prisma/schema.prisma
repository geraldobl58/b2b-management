// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// -------------------------
/// Enums
/// -------------------------
enum Role {
  OWNER
  ADMIN
  MANAGER
  ANALYST
  VIEWER
}

enum Channel {
  GOOGLE_ADS
  META_ADS
  LINKEDIN_ADS
  TIKTOK_ADS
  EMAIL
  ORGANIC_SOCIAL
  SEO
  OTHER
}

enum CampaignStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

enum LeadStatus {
  NEW
  QUALIFIED
  CONTACTED
  WON
  LOST
}

enum AssetType {
  IMAGE
  VIDEO
  COPY
  DOC
  OTHER
}

enum PlanType {
  BASIC
  PRO
  ENTERPRISE
}

enum SocialPostStatus {
  DRAFT
  SCHEDULED
  PUBLISHED
  FAILED
}

enum ReportFormat {
  PDF
  XLSX
  HTML
}

enum MetricKind {
  // Principais KPIs
  IMPRESSIONS
  CLICKS
  CTR
  CPC
  CPM
  CONVERSIONS
  CPA
  REVENUE
  ROAS
  COST
  LEADS
  // Web analytics
  SESSIONS
  USERS
  BOUNCE_RATE
  // Email/social
  OPENS
  OPEN_RATE
  REPLIES
  REACTIONS
  COMMENTS
  SHARES
}

/// -------------------------
/// Core: Org / Workspace / User
/// -------------------------
model Organization {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  domain    String?  // empresa.com
  industry  String?
  companySize String? // 1-10, 11-50, etc
  timezone  String   @default("UTC")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  workspaces Workspace[]
  users      OrganizationUser[]

  // Billing
  billingEmail String?
  plan         PlanType @default(BASIC)
}

model Workspace {
  id             String    @id @default(cuid())
  organizationId String
  name           String
  slug           String    @unique
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  archivedAt     DateTime?

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  members      WorkspaceUser[]
  campaigns    Campaign[]
  leads        Lead[]
  leadSources  LeadSource[]
  integrations Integration[]
  assets       Asset[]
  reports      Report[]
  automations  Automation[]
  webhooks     WebhookEndpoint[]
  metricDaily  MetricDaily[]
  tag          Tag[]
  socialPost   SocialPost[]
  auditLogs    AuditLog[]
}

model User {
  id        String  @id @default(cuid())
  email     String  @unique
  name      String
  password  String? // Optional for OAuth/SSO
  avatarUrl String?

  organizations OrganizationUser[]
  workspaces    WorkspaceUser[]
  asset         Asset[]
  auditLogs     AuditLog[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrganizationUser {
  id             String   @id @default(cuid())
  organizationId String
  userId         String
  role           Role     @default(ADMIN)
  createdAt      DateTime @default(now())

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId])
}

model WorkspaceUser {
  id          String   @id @default(cuid())
  workspaceId String
  userId      String
  role        Role     @default(ANALYST)
  createdAt   DateTime @default(now())

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, userId])
}

/// -------------------------
/// Campaigns
/// -------------------------
model Campaign {
  id          String         @id @default(cuid())
  workspaceId String
  name        String
  channel     Channel
  externalId  String? // id da plataforma (ex: Google/META)
  status      CampaignStatus @default(DRAFT)
  startDate   DateTime?
  endDate     DateTime?
  dailyBudget Decimal?       @db.Decimal(18, 2)
  totalBudget Decimal?       @db.Decimal(18, 2)
  currency    String? // "BRL","USD"...
  objective   String? // ex: Leads, Conversions
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  archivedAt  DateTime?

  workspace    Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  adGroups     AdGroup[]
  metricsDaily MetricDaily[]
  tags         CampaignTag[]
  Lead         Lead[]

  @@index([status, workspaceId])
  @@index([channel])
  @@index([workspaceId, createdAt])
}

model AdGroup {
  id         String   @id @default(cuid())
  campaignId String
  name       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  campaign    Campaign      @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  ads         Ad[]
  MetricDaily MetricDaily[]
}

model Ad {
  id         String   @id @default(cuid())
  adGroupId  String
  name       String
  creativeId String? // plataforma
  url        String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  adGroup     AdGroup       @relation(fields: [adGroupId], references: [id], onDelete: Cascade)
  MetricDaily MetricDaily[]
}

/// Métricas diárias (tabela “fato”)
model MetricDaily {
  id          String     @id @default(cuid())
  workspaceId String
  campaignId  String?
  adGroupId   String?
  adId        String?
  date        DateTime
  kind        MetricKind
  value       Decimal    @db.Decimal(24, 8)
  createdAt   DateTime   @default(now())

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  campaign  Campaign? @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  adGroup   AdGroup?  @relation(fields: [adGroupId], references: [id], onDelete: Cascade)
  ad        Ad?       @relation(fields: [adId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, campaignId, adGroupId, adId, date, kind])
  @@index([workspaceId, date])
  @@index([campaignId, date])
  @@index([kind, date])
  @@index([adGroupId])
  @@index([adId])
}

/// Tags simples para segmentar campanhas
model Tag {
  id          String   @id @default(cuid())
  workspaceId String
  name        String
  color       String? // hex
  createdAt   DateTime @default(now())

  workspace Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  campaigns CampaignTag[]
}

model CampaignTag {
  campaignId String
  tagId      String

  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  tag      Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([campaignId, tagId])
}

/// -------------------------
/// Leads & CRM light
/// -------------------------
model LeadSource {
  id          String   @id @default(cuid())
  workspaceId String
  name        String
  channel     Channel?
  details     Json?
  createdAt   DateTime @default(now())

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  leads     Lead[]
}

model Lead {
  id          String     @id @default(cuid())
  workspaceId String
  sourceId    String?
  campaignId  String?
  name        String?
  email       String?
  phone       String?
  company     String?
  jobTitle    String?
  leadValue   Decimal?   @db.Decimal(18,2)
  status      LeadStatus @default(NEW)
  score       Int? // lead scoring simples
  notes       String?
  custom      Json?
  // UTM tracking
  utmSource   String?
  utmMedium   String?
  utmCampaign String?
  utmContent  String?
  utmTerm     String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  workspace Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  source    LeadSource? @relation(fields: [sourceId], references: [id], onDelete: SetNull)
  campaign  Campaign?   @relation(fields: [campaignId], references: [id], onDelete: SetNull)

  @@index([workspaceId, status])
  @@index([campaignId])
  @@index([email])
  @@index([createdAt])
  @@index([company])
}

/// -------------------------
/// Conteúdo / Assets
/// -------------------------
model Asset {
  id          String    @id @default(cuid())
  workspaceId String
  type        AssetType
  title       String
  url         String // S3/Spaces/Cloud
  metadata    Json?
  createdById String?
  createdAt   DateTime  @default(now())

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdBy User?     @relation(fields: [createdById], references: [id], onDelete: SetNull)
}

model SocialPost {
  id          String           @id @default(cuid())
  workspaceId String
  channel     Channel
  content     String
  scheduledAt DateTime?
  publishedAt DateTime?
  status      SocialPostStatus @default(DRAFT)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

/// -------------------------
/// Relatórios
/// -------------------------
model Report {
  id          String       @id @default(cuid())
  workspaceId String
  name        String
  periodStart DateTime
  periodEnd   DateTime
  format      ReportFormat @default(PDF)
  deliveredTo String[] // e-mails
  config      Json? // definição de widgets/KPIs
  fileUrl     String? // arquivo gerado
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

/// -------------------------
/// Integrações e automação
/// -------------------------
model Integration {
  id           String    @id @default(cuid())
  workspaceId  String
  provider     String // "google_ads","meta","ga4","hubspot"...
  label        String?
  accessToken  String?
  refreshToken String?
  expiresAt    DateTime?
  settings     Json?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId, provider])
}

model Automation {
  id          String   @id @default(cuid())
  workspaceId String
  name        String
  active      Boolean  @default(true)
  trigger     Json // ex: {type:"lead.created", filters:{status:"NEW"}}
  actions     Json // ex: [{type:"email.send"...}, {type:"slack.notify"...}]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model WebhookEndpoint {
  id          String   @id @default(cuid())
  workspaceId String
  name        String
  url         String
  secret      String?
  createdAt   DateTime @default(now())

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

/// -------------------------
/// Auditoria
/// -------------------------
model AuditLog {
  id          String   @id @default(cuid())
  workspaceId String
  userId      String
  action      String   // CREATE, UPDATE, DELETE
  entity      String   // Campaign, Lead, etc
  entityId    String
  changes     Json?    // before/after values
  createdAt   DateTime @default(now())

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([workspaceId, createdAt])
  @@index([entity, entityId])
  @@index([userId])
}
